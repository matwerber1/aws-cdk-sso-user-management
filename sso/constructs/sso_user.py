import os
from typing import Any, TypedDict

from aws_cdk import CustomResource
from constructs import Construct

from .sso_user_provider import SsoUserProvider

dirname = os.path.dirname(__file__)


class SsoUserAttributes(TypedDict):
    username: str
    first_name: str
    last_name: str
    email: str


class SsoUser(Construct):
    """
    This construct deploys a CloudFormation custom resource backed by a Lambda function that uses
    AWS identity store APIs to create, edit, or delete users. This approach is needed because
    AWS CloudFormation (and thus CDK) does not support creation of users natively.
    This construct only supports a handful of the attributes actually available for users and can
    be extended if needed.
    """

    def __init__(
        self,
        scope: Construct,
        *,
        user_attributes: SsoUserAttributes,
        **kwargs: Any,
    ):
        print(user_attributes)
        id = "SsoUser-" + user_attributes["username"]
        super().__init__(scope, id)
        provider = SsoUserProvider.get_or_create(self)
        user = CustomResource(
            self,
            id=id,
            resource_type="Custom::SsoUser",
            service_token=provider.service_token,
            properties=user_attributes,
        )
        self._user_id = user.get_att_string("UserId")
        self._arn = user.get_att_string("Arn")
        self._email = user_attributes["email"]
        self._username = user_attributes["username"]

    @property
    def user_id(self):
        """
        Provides the unique GUID user ID generated by AWS Identity Store after user is created.
        This is not the username that the user would use to log in with and instead a backend
        ID needed when programmatically assigning a user to groups, for example.
        """
        return self._user_id

    @property
    def user_arn(self):
        """
        Provides the unique ARN of the resource generated by AWS Identity Store.
        This is not the username that the user would use to log in with and instead a backend
        ID that may be needed for certain programmatic interactions with the user.
        """
        return self._arn

    @property
    def email(self):
        """
        The user's email address.
        """
        return self._email

    @property
    def username(self):
        """
        The user's username for logging in to SSO.
        """
        return self._username